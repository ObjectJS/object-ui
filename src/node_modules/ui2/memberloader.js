/**
 * 获取模块中的成员通过callback返回
 * [a.b.c.D, e.f.g.H] ==> [a.b.c模块中的D成员, e.f.g模块中的H成员]
 * @param {Array|String} items 用“,”拆分的字符串，一个表示一个成员
 * @param {Function} callback 通过数组返回找到的所有成员
 */
function load(items, callback) {
	if (!items) {
		callback();
		return;
	}
	items = items.trim();
	var dependencies = [];
	var memberNames = [];
	if (!Array.isArray(items)) {
		items = items.split(/\s*,\s*/g);
	}
	// 将模块路径和成员拆开，顺序分别存放到两个数组中
	// [a.b.c.D, e.f.g.H]
	// ==> [a.b.c, e.f.g], [D, H]
	items.forEach(function(item) {
		dependencies.push(item.slice(0, item.lastIndexOf('.')).replace(/\./g, '/'));
		memberNames.push(item.slice(item.lastIndexOf('.') + 1));
	});
	require.async(dependencies, function() {
		var members = [];
		var member;
		for (var i = 0; i < arguments.length; i++) {
			member = arguments[i][memberNames[i]];
			if (member === undefined) {
				console.warn('can\'t find ' + memberNames[i] + ' in ' + dependencies[i]);
			}
			members.push(member);
		}
		callback.apply(null, members);
	});
}

this.load = load;
